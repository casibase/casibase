name: Build

on:
  push:
    branches:
      - master
  pull_request:

jobs:

  go-tests:
    name: Running Go tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: casibase
          MYSQL_ROOT_PASSWORD: 123456
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.23.6'
          cache-dependency-path: ./go.mod
      - name: Tests
        run: go test -v $(go list ./...) -tags skipCi

  frontend:
    name: Front-end
    runs-on: ubuntu-latest
    needs: [ go-tests ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'yarn'
          cache-dependency-path: ./web/yarn.lock
      - run: yarn install && CI=false yarn run build
        working-directory: ./web
      - name: Upload build artifacts
        if: github.repository == 'casibase/casibase' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.run_id }}
          path: ./web/build

  backend:
    name: Back-end
    runs-on: ubuntu-latest
    needs: [ go-tests ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.23.6'
          cache-dependency-path: ./go.mod
      - run: go version
      - name: Build
        run: |
          go build -race -ldflags "-extldflags '-static'"
        working-directory: ./

  linter:
    name: Go-Linter
    runs-on: ubuntu-latest
    needs: [ go-tests ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.23.6'
          cache: false

      # gen a dummy config file
      - run: touch dummy.yml

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --disable-all -c dummy.yml -E=gofumpt --max-same-issues=0 --timeout 5m --modules-download-mode=mod


  tag-release:
    name: Create Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    if: github.repository == 'casibase/casibase' && github.event_name == 'push'
    needs: [ frontend, backend, linter ]
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new_release_published }}
      new-release-version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Tag with Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  github-release:
    name: GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    if: github.repository == 'casibase/casibase' && github.event_name == 'push' && needs.tag-release.outputs.new-release-published == 'true'
    needs: [ tag-release ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Free disk space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: true

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.run_id }}
          path: ./web/build

      - name: Prepare Go caches
        run: |
          echo "GOMODCACHE=$RUNNER_TEMP/gomod" >> $GITHUB_ENV
          echo "GOCACHE=$RUNNER_TEMP/gocache" >> $GITHUB_ENV
          go clean -cache -modcache -testcache -fuzzcache

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    if: github.repository == 'casibase/casibase' && github.event_name == 'push' && needs.tag-release.outputs.new-release-published == 'true'
    needs: [ tag-release ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: -1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v3
        with:
          context: .
          target: STANDARD
          platforms: linux/amd64,linux/arm64
          push: true
          tags: casbin/casibase:${{ needs.tag-release.outputs.new-release-version }},casbin/casibase:latest

      - name: Push All In One Version to Docker Hub
        uses: docker/build-push-action@v3
        with:
          context: .
          target: ALLINONE
          platforms: linux/amd64,linux/arm64
          push: true
          tags: casbin/casibase-all-in-one:${{ needs.tag-release.outputs.new-release-version }},casbin/casibase-all-in-one:latest

      - uses: actions/checkout@v3
        with:
          repository: casibase/casibase-helm
          ref: 'master'
          token: ${{ secrets.GH_BOT_TOKEN }}

      - name: Update Helm Chart
        run: |
          # Set the appVersion and version of the chart to the current tag
          sed -i "s/appVersion: .*/appVersion: ${{ needs.tag-release.outputs.new-release-version }}/g" ./casibase-helm-chart/Chart.yaml
          sed -i "s/version: .*/version: ${{ needs.tag-release.outputs.new-release-version }}/g" ./casibase-helm-chart/Chart.yaml

          REGISTRY=oci://registry-1.docker.io/casbin
          cd casibase-helm-chart
          helm package .
          PKG_NAME=$(ls *.tgz)
          helm repo index . --url $REGISTRY --merge index.yaml
          helm push $PKG_NAME $REGISTRY
          rm $PKG_NAME

          # Commit and push the changes back to the repository
          git config --global user.name "casbin-bot"
          git config --global user.email "bot@casbin.org"
          git add Chart.yaml index.yaml
          git commit -m "chore(helm): bump helm charts appVersion to ${{ needs.tag-release.outputs.new-release-version }}"
          git tag ${{ needs.tag-release.outputs.new-release-version }}
          git push origin HEAD:master --follow-tags
