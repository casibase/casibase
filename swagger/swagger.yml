swagger: "2.0"
info:
  title: Casibase RESTful API
  description: Swagger Docs of Casibase Backend API
  version: 1.70.0
  contact:
    email: admin@casibase.org
basePath: /api
schemes:
- https
- http
paths:
  /activate-file:
    post:
      tags:
      - File API
      description: activate file
      operationId: ApiController.ActivateFile
      parameters:
      - in: query
        name: key
        description: The key of the file
        required: true
        type: string
      - in: query
        name: filename
        description: The name of the file
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-application:
    post:
      tags:
      - Application API
      description: add application
      operationId: ApiController.AddApplication
      parameters:
      - in: body
        name: body
        description: The details of the application
        required: true
        schema:
          $ref: '#/definitions/object.Application'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-article:
    post:
      tags:
      - Article API
      description: add article
      operationId: ApiController.AddArticle
      parameters:
      - in: body
        name: body
        description: The details of the article
        required: true
        schema:
          $ref: '#/definitions/object.Article'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-chat:
    post:
      tags:
      - Chat API
      description: add chat
      operationId: ApiController.AddChat
      parameters:
      - in: body
        name: body
        description: The details of the chat
        required: true
        schema:
          $ref: '#/definitions/object.Chat'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-connection:
    post:
      tags:
      - Connection API
      description: add connection
      operationId: ApiController.AddConnection
      parameters:
      - in: body
        name: body
        description: The connection object
        required: true
        schema:
          $ref: '#/definitions/object.Connection'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/Response'
  /add-container:
    post:
      tags:
      - Container API
      description: add a container
      operationId: ApiController.AddContainer
      parameters:
      - in: body
        name: body
        description: The details of the container
        required: true
        schema:
          $ref: '#/definitions/object.Container'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-file:
    post:
      tags:
      - File API
      description: add file
      operationId: ApiController.AddFile
      parameters:
      - in: query
        name: store
        description: The store of the file
        required: true
        type: string
      - in: query
        name: key
        description: The key of the file
        required: true
        type: string
      - in: query
        name: isLeaf
        description: if is leaf
        required: true
        type: string
      - in: query
        name: filename
        description: The name of the file
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-form:
    post:
      tags:
      - Form API
      description: add form
      operationId: ApiController.AddForm
      parameters:
      - in: body
        name: body
        description: The details of the form
        required: true
        schema:
          $ref: '#/definitions/object.Form'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-image:
    post:
      tags:
      - Image API
      description: add a image
      operationId: ApiController.AddImage
      parameters:
      - in: body
        name: body
        description: The details of the image
        required: true
        schema:
          $ref: '#/definitions/object.Image'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-machine:
    post:
      tags:
      - Machine API
      description: add a machine
      operationId: ApiController.AddMachine
      parameters:
      - in: body
        name: body
        description: The details of the machine
        required: true
        schema:
          $ref: '#/definitions/object.Machine'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-message:
    post:
      tags:
      - Message API
      description: add message
      operationId: ApiController.AddMessage
      parameters:
      - in: body
        name: body
        description: The details of the message
        required: true
        schema:
          $ref: '#/definitions/object.Message'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Chat'
  /add-node:
    post:
      tags:
      - Node API
      description: add a node
      operationId: ApiController.AddNode
      parameters:
      - in: body
        name: body
        description: The details of the node
        required: true
        schema:
          $ref: '#/definitions/object.Node'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-node-tunnel:
    get:
      tags:
      - Connection API
      description: add node tunnel session
      operationId: ApiController.AddNodeTunnel
      parameters:
      - in: query
        name: nodeId
        description: The id of node
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/Response'
  /add-permission:
    post:
      tags:
      - Permission API
      description: add permission
      operationId: ApiController.AddPermission
      parameters:
      - in: body
        name: body
        description: The details of the permission
        required: true
        schema:
          $ref: '#/definitions/casdoorsdk.Permission'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-pod:
    post:
      tags:
      - Pod API
      description: add a pod
      operationId: ApiController.AddPod
      parameters:
      - in: body
        name: body
        description: The details of the pod
        required: true
        schema:
          $ref: '#/definitions/object.Pod'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-provider:
    post:
      tags:
      - Provider API
      description: add provider
      operationId: ApiController.AddProvider
      parameters:
      - in: body
        name: body
        description: The details of the provider
        required: true
        schema:
          $ref: '#/definitions/object.Provider'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-record:
    post:
      tags:
      - Record API
      description: add a record
      operationId: ApiController.AddRecord
      parameters:
      - in: body
        name: body
        description: The details of the record
        required: true
        schema:
          $ref: '#/definitions/object.Record'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-records:
    post:
      tags:
      - Record API
      description: add multiple records
      operationId: ApiController.AddRecords
      parameters:
      - in: body
        name: body
        description: The details of the record
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/object.Record'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-store:
    post:
      tags:
      - Store API
      description: add store
      operationId: ApiController.AddStore
      parameters:
      - in: body
        name: body
        description: The details of the store
        required: true
        schema:
          $ref: '#/definitions/object.Store'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-task:
    post:
      tags:
      - Task API
      description: add task
      operationId: ApiController.AddTask
      parameters:
      - in: body
        name: body
        description: The details of the task
        required: true
        schema:
          $ref: '#/definitions/object.Task'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-template:
    post:
      tags:
      - Template API
      description: add template
      operationId: ApiController.AddTemplate
      parameters:
      - in: body
        name: body
        description: The details of the template
        required: true
        schema:
          $ref: '#/definitions/object.Template'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-vector:
    post:
      tags:
      - Vector API
      description: add vector
      operationId: ApiController.AddVector
      parameters:
      - in: body
        name: body
        description: The details of the vector
        required: true
        schema:
          $ref: '#/definitions/object.Vector'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-video:
    post:
      tags:
      - Video API
      description: add video
      operationId: ApiController.AddVideo
      parameters:
      - in: body
        name: body
        description: The details of the video
        required: true
        schema:
          $ref: '#/definitions/object.Video'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /add-workflow:
    post:
      tags:
      - Workflow API
      description: add workflow
      operationId: ApiController.AddWorkflow
      parameters:
      - in: body
        name: body
        description: The details of the workflow
        required: true
        schema:
          $ref: '#/definitions/object.Workflow'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /api/chat/completions:
    post:
      tags:
      - OpenAI Compatible API
      description: OpenAI compatible chat completions API
      operationId: ApiController.ChatCompletions
      parameters:
      - in: body
        name: body
        description: The OpenAI chat request
        required: true
        schema:
          $ref: '#/definitions/openai.ChatCompletionRequest'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/openai.ChatCompletionResponse'
  /commit-record:
    post:
      tags:
      - Record API
      description: commit a record
      operationId: ApiController.CommitRecord
      parameters:
      - in: body
        name: body
        description: The details of the record
        required: true
        schema:
          $ref: '#/definitions/object.Record'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /commit-record-second:
    post:
      tags:
      - Record API
      description: commit a record
      operationId: ApiController.CommitRecordSecond
      parameters:
      - in: body
        name: body
        description: The details of the record
        required: true
        schema:
          $ref: '#/definitions/object.Record'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-all-vectors:
    post:
      tags:
      - Vector API
      description: delete all vectors
      operationId: ApiController.DeleteAllVectors
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-application:
    post:
      tags:
      - Application API
      description: delete application
      operationId: ApiController.DeleteApplication
      parameters:
      - in: body
        name: body
        description: The details of the application
        required: true
        schema:
          $ref: '#/definitions/object.Application'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-article:
    post:
      tags:
      - Article API
      description: delete article
      operationId: ApiController.DeleteArticle
      parameters:
      - in: body
        name: body
        description: The details of the article
        required: true
        schema:
          $ref: '#/definitions/object.Article'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-chat:
    post:
      tags:
      - Chat API
      description: delete chat
      operationId: ApiController.DeleteChat
      parameters:
      - in: body
        name: body
        description: The details of the chat
        required: true
        schema:
          $ref: '#/definitions/object.Chat'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-connection:
    post:
      tags:
      - Connection API
      description: delete connection
      operationId: ApiController.DeleteConnection
      parameters:
      - in: query
        name: id
        description: The id of connection
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/Response'
  /delete-container:
    post:
      tags:
      - Container API
      description: delete a container
      operationId: ApiController.DeleteContainer
      parameters:
      - in: body
        name: body
        description: The details of the container
        required: true
        schema:
          $ref: '#/definitions/object.Container'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-file:
    post:
      tags:
      - File API
      description: delete file
      operationId: ApiController.DeleteFile
      parameters:
      - in: query
        name: store
        description: The store of the file
        required: true
        type: string
      - in: query
        name: key
        description: The key of the file
        required: true
        type: string
      - in: query
        name: isLeaf
        description: if is leaf
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-form:
    post:
      tags:
      - Form API
      description: delete form
      operationId: ApiController.DeleteForm
      parameters:
      - in: body
        name: body
        description: The details of the form
        required: true
        schema:
          $ref: '#/definitions/object.Form'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-image:
    post:
      tags:
      - Image API
      description: delete a image
      operationId: ApiController.DeleteImage
      parameters:
      - in: body
        name: body
        description: The details of the image
        required: true
        schema:
          $ref: '#/definitions/object.Image'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-machine:
    post:
      tags:
      - Machine API
      description: delete a machine
      operationId: ApiController.DeleteMachine
      parameters:
      - in: body
        name: body
        description: The details of the machine
        required: true
        schema:
          $ref: '#/definitions/object.Machine'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-message:
    post:
      tags:
      - Message API
      description: delete message
      operationId: ApiController.DeleteMessage
      parameters:
      - in: body
        name: body
        description: The details of the message
        required: true
        schema:
          $ref: '#/definitions/object.Message'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-node:
    post:
      tags:
      - Node API
      description: delete a node
      operationId: ApiController.DeleteNode
      parameters:
      - in: body
        name: body
        description: The details of the node
        required: true
        schema:
          $ref: '#/definitions/object.Node'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-permission:
    post:
      tags:
      - Permission API
      description: delete permission
      operationId: ApiController.DeletePermission
      parameters:
      - in: body
        name: body
        description: The details of the permission
        required: true
        schema:
          $ref: '#/definitions/casdoorsdk.Permission'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-pod:
    post:
      tags:
      - Pod API
      description: delete a pod
      operationId: ApiController.DeletePod
      parameters:
      - in: body
        name: body
        description: The details of the pod
        required: true
        schema:
          $ref: '#/definitions/object.Pod'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-provider:
    post:
      tags:
      - Provider API
      description: delete provider
      operationId: ApiController.DeleteProvider
      parameters:
      - in: body
        name: body
        description: The details of the provider
        required: true
        schema:
          $ref: '#/definitions/object.Provider'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-record:
    post:
      tags:
      - Record API
      description: delete a record
      operationId: ApiController.DeleteRecord
      parameters:
      - in: body
        name: body
        description: The details of the record
        required: true
        schema:
          $ref: '#/definitions/object.Record'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-store:
    post:
      tags:
      - Store API
      description: delete store
      operationId: ApiController.DeleteStore
      parameters:
      - in: body
        name: body
        description: The details of the store
        required: true
        schema:
          $ref: '#/definitions/object.Store'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-task:
    post:
      tags:
      - Task API
      description: delete task
      operationId: ApiController.DeleteTask
      parameters:
      - in: body
        name: body
        description: The details of the task
        required: true
        schema:
          $ref: '#/definitions/object.Task'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-template:
    post:
      tags:
      - Template API
      description: delete template
      operationId: ApiController.DeleteTemplate
      parameters:
      - in: body
        name: body
        description: The details of the template
        required: true
        schema:
          $ref: '#/definitions/object.Template'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-vector:
    post:
      tags:
      - Vector API
      description: delete vector
      operationId: ApiController.DeleteVector
      parameters:
      - in: body
        name: body
        description: The details of the vector
        required: true
        schema:
          $ref: '#/definitions/object.Vector'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-video:
    post:
      tags:
      - Video API
      description: delete video
      operationId: ApiController.DeleteVideo
      parameters:
      - in: body
        name: body
        description: The details of the video
        required: true
        schema:
          $ref: '#/definitions/object.Video'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /delete-workflow:
    post:
      tags:
      - Workflow API
      description: delete workflow
      operationId: ApiController.DeleteWorkflow
      parameters:
      - in: body
        name: body
        description: The details of the workflow
        required: true
        schema:
          $ref: '#/definitions/object.Workflow'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /deploy-application:
    post:
      tags:
      - Application API
      description: deploy application synchronously
      operationId: ApiController.DeployApplication
      parameters:
      - in: body
        name: body
        description: The deployment request details
        required: true
        schema:
          $ref: '#/definitions/ApplicationDeploymentRequest'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /generate-text-to-speech-audio:
    post:
      tags:
      - TTS API
      description: convert text to speech
      operationId: ApiController.GenerateTextToSpeechAudio
      parameters:
      - in: controllers.TextToSpeechRequest
        name: body
        description: The text to convert to speech
        schema:
          $ref: '#/definitions/true'
      responses:
        "200":
          description: The audio data
          schema:
            type: array
            items:
              format: byte
              type: string
  /generate-text-to-speech-audio-stream:
    get:
      tags:
      - TTS API
      description: convert text to speech with streaming
      operationId: ApiController.GenerateTextToSpeechAudioStream
      parameters:
      - in: query
        name: storeId
        description: The store ID
        required: true
        type: string
      - in: query
        name: messageId
        description: The message ID
        required: true
        type: string
      responses:
        "200":
          description: '{stream} string "An event stream of audio chunks in base64 format"'
  /get-Messages:
    get:
      tags:
      - Message API
      description: get Messages
      operationId: ApiController.GetMessages
      parameters:
      - in: query
        name: user
        description: The user of message
        required: true
        type: string
      - in: query
        name: chat
        description: The chat of message
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Message'
  /get-account:
    get:
      tags:
      - Account API
      description: get account
      operationId: ApiController.GetAccount
      responses:
        "200":
          description: '{casdoorsdk} casdoorsdk.Claims The Response object'
  /get-active-file:
    get:
      tags:
      - File API
      description: get active file
      operationId: ApiController.GetActiveFile
      parameters:
      - in: query
        name: prefix
        description: The prefix of the file
        required: true
        type: string
      responses:
        "200":
          description: '{string} string "get active file"'
  /get-activities:
    get:
      tags:
      - Activity API
      description: get activities
      operationId: ApiController.GetActivities
      parameters:
      - in: query
        name: days
        description: days count
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Activity'
  /get-answer:
    get:
      tags:
      - Message API
      description: get answer
      operationId: ApiController.GetAnswer
      parameters:
      - in: query
        name: provider
        description: The provider
        required: true
        type: string
      - in: query
        name: question
        description: The question of message
        required: true
        type: string
      - in: query
        name: framework
        description: The framework
        required: true
        type: string
      - in: query
        name: video
        description: The video
        required: true
        type: string
      responses:
        "200":
          description: '{string} string "answer message"'
  /get-application:
    get:
      tags:
      - Application API
      description: get application
      operationId: ApiController.GetApplication
      parameters:
      - in: query
        name: id
        description: The id of application
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Application'
  /get-application-status:
    get:
      tags:
      - Application API
      description: get application deployment status
      operationId: ApiController.GetApplicationStatus
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of the application
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.DeploymentStatus'
  /get-applications:
    get:
      tags:
      - Application API
      description: get applications
      operationId: ApiController.GetApplications
      parameters:
      - in: query
        name: owner
        description: The owner of applications
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Application'
  /get-article:
    get:
      tags:
      - Article API
      description: get article
      operationId: ApiController.GetArticle
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of article
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Article'
  /get-articles:
    get:
      tags:
      - Article API
      description: get articles
      operationId: ApiController.GetArticles
      parameters:
      - in: query
        name: owner
        description: The owner of article
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Article'
  /get-chat:
    get:
      tags:
      - Chat API
      description: get chat
      operationId: ApiController.GetChat
      parameters:
      - in: query
        name: id
        description: The id of chat
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Chat'
  /get-chats:
    get:
      tags:
      - Chat API
      description: get chats
      operationId: ApiController.GetChats
      parameters:
      - in: query
        name: user
        description: The user of chat
        required: true
        type: string
      - in: query
        name: field
        description: The field of chat
        required: true
        type: string
      - in: query
        name: value
        description: The value of chat
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Chat'
  /get-connection:
    get:
      tags:
      - Connection API
      description: get connection
      operationId: ApiController.GetConnection
      parameters:
      - in: query
        name: id
        description: The id of connection
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/object.Connection'
  /get-connections:
    get:
      tags:
      - Connection API
      description: get all connections
      operationId: ApiController.GetConnections
      parameters:
      - in: query
        name: pageSize
        description: The size of each page
        required: true
        type: string
      - in: query
        name: p
        description: The number of the page
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Connection'
  /get-container:
    get:
      tags:
      - Container API
      description: get container
      operationId: ApiController.GetContainer
      parameters:
      - in: query
        name: id
        description: The id ( owner/name ) of the container
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Container'
  /get-containers:
    get:
      tags:
      - Container API
      description: get all containers
      operationId: ApiController.GetContainers
      parameters:
      - in: query
        name: pageSize
        description: The size of each page
        required: true
        type: string
      - in: query
        name: p
        description: The number of the page
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Container'
  /get-form:
    get:
      tags:
      - Form API
      description: get form
      operationId: ApiController.GetForm
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of form
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Form'
  /get-form-data:
    get:
      tags:
      - Form API
      description: get forms
      operationId: ApiController.GetFormData
      parameters:
      - in: query
        name: owner
        description: The owner of form
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Form'
  /get-forms:
    get:
      tags:
      - Form API
      description: get forms
      operationId: ApiController.GetForms
      parameters:
      - in: query
        name: owner
        description: The owner of form
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Form'
  /get-global-articles:
    get:
      tags:
      - Article API
      description: get global articles
      operationId: ApiController.GetGlobalArticles
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Article'
  /get-global-chats:
    get:
      tags:
      - Chat API
      description: get global chats
      operationId: ApiController.GetGlobalChats
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Chat'
  /get-global-forms:
    get:
      tags:
      - Form API
      description: get global forms
      operationId: ApiController.GetGlobalForms
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Form'
  /get-global-messages:
    get:
      tags:
      - Message API
      description: get global messages
      operationId: ApiController.GetGlobalMessages
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Message'
  /get-global-providers:
    get:
      tags:
      - Provider API
      description: get global providers
      operationId: ApiController.GetGlobalProviders
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Provider'
  /get-global-stores:
    get:
      tags:
      - Store API
      description: get global stores
      operationId: ApiController.GetGlobalStores
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Store'
  /get-global-tasks:
    get:
      tags:
      - Task API
      description: get global tasks
      operationId: ApiController.GetGlobalTasks
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Task'
  /get-global-vectors:
    get:
      tags:
      - Vector API
      description: get global vectors
      operationId: ApiController.GetGlobalVectors
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Vector'
  /get-global-videos:
    get:
      tags:
      - Video API
      description: get global videos
      operationId: ApiController.GetGlobalVideos
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Video'
  /get-global-workflows:
    get:
      tags:
      - Workflow API
      description: get global workflows
      operationId: ApiController.GetGlobalWorkflows
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Workflow'
  /get-image:
    get:
      tags:
      - Image API
      description: get image
      operationId: ApiController.GetImage
      parameters:
      - in: query
        name: id
        description: The id ( owner/name ) of the image
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Image'
  /get-images:
    get:
      tags:
      - Image API
      description: get all images
      operationId: ApiController.GetImages
      parameters:
      - in: query
        name: pageSize
        description: The size of each page
        required: true
        type: string
      - in: query
        name: p
        description: The number of the page
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Image'
  /get-k8s-status:
    get:
      tags:
      - Deployment API
      description: get kubernetes cluster status
      operationId: ApiController.GetK8sStatus
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.K8sStatus'
  /get-machine:
    get:
      tags:
      - Machine API
      description: get machine
      operationId: ApiController.GetMachine
      parameters:
      - in: query
        name: id
        description: The id ( owner/name ) of the machine
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Machine'
  /get-machines:
    get:
      tags:
      - Machine API
      description: get all machines
      operationId: ApiController.GetMachines
      parameters:
      - in: query
        name: pageSize
        description: The size of each page
        required: true
        type: string
      - in: query
        name: p
        description: The number of the page
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Machine'
  /get-message:
    get:
      tags:
      - Message API
      description: get message
      operationId: ApiController.GetMessage
      parameters:
      - in: query
        name: id
        description: The id of message
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Message'
  /get-message-answer:
    get:
      tags:
      - Message API
      description: get message answer
      operationId: ApiController.GetMessageAnswer
      parameters:
      - in: query
        name: id
        description: The id of message
        required: true
        type: string
      responses:
        "200":
          description: '{stream} string "An event stream of message answers in JSON format"'
  /get-node:
    get:
      tags:
      - Node API
      description: get node
      operationId: ApiController.GetNode
      parameters:
      - in: query
        name: id
        description: The id ( owner/name ) of the node
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Node'
  /get-node-tunnel:
    get:
      tags:
      - Connection API
      description: get node tunnel session
      operationId: ApiController.GetNodeTunnel
      parameters:
      - in: query
        name: width
        description: The width of the tunnel
        required: true
        type: string
      - in: query
        name: height
        description: The height of the tunnel
        required: true
        type: string
      - in: query
        name: dpi
        description: The dpi of the tunnel
        required: true
        type: string
      - in: query
        name: connectionId
        description: The id of the connectionId
        required: true
        type: string
      - in: query
        name: username
        description: The username for the tunnel
        required: true
        type: string
      - in: query
        name: password
        description: The password for the tunnel
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/Response'
  /get-nodes:
    get:
      tags:
      - Node API
      description: get all nodes
      operationId: ApiController.GetNodes
      parameters:
      - in: query
        name: pageSize
        description: The size of each page
        required: true
        type: string
      - in: query
        name: p
        description: The number of the page
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Node'
  /get-permission:
    get:
      tags:
      - Permission API
      description: get permission
      operationId: ApiController.GetPermission
      parameters:
      - in: query
        name: id
        description: The id(owner/name) of permission
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/casdoorsdk.Permission'
  /get-permissions:
    get:
      tags:
      - Permission API
      description: get permissions
      operationId: ApiController.GetPermissions
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/casdoorsdk.Permission'
  /get-pod:
    get:
      tags:
      - Pod API
      description: get pod
      operationId: ApiController.GetPod
      parameters:
      - in: query
        name: id
        description: The id ( owner/name ) of the pod
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Pod'
  /get-pods:
    get:
      tags:
      - Pod API
      description: get all pods
      operationId: ApiController.GetPods
      parameters:
      - in: query
        name: pageSize
        description: The size of each page
        required: true
        type: string
      - in: query
        name: p
        description: The number of the page
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Pod'
  /get-prometheus-info:
    get:
      tags:
      - System API
      description: get Prometheus Info
      operationId: ApiController.GetPrometheusInfo
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.PrometheusInfo'
  /get-provider:
    get:
      tags:
      - Provider API
      description: get provider
      operationId: ApiController.GetProvider
      parameters:
      - in: query
        name: id
        description: The id of provider
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Provider'
  /get-providers:
    get:
      tags:
      - Provider API
      description: get providers
      operationId: ApiController.GetProviders
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Provider'
  /get-range-usages:
    get:
      tags:
      - Usage API
      description: get range usages
      operationId: ApiController.GetRangeUsages
      parameters:
      - in: query
        name: count
        description: count of range usages
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Usage'
  /get-record:
    get:
      tags:
      - Record API
      description: get record
      operationId: ApiController.GetRecord
      parameters:
      - in: query
        name: id
        description: The id ( owner/name ) of the record
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Record'
  /get-records:
    get:
      tags:
      - Record API
      description: get all records
      operationId: ApiController.GetRecords
      parameters:
      - in: query
        name: pageSize
        description: The size of each page
        required: true
        type: string
      - in: query
        name: p
        description: The number of the page
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Record'
  /get-storage-providers:
    get:
      tags:
      - Storage Provider API
      description: get storage providers
      operationId: ApiController.GetStorageProviders
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Provider'
  /get-store:
    get:
      tags:
      - Store API
      description: get store
      operationId: ApiController.GetStore
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of the store
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Store'
  /get-stores:
    get:
      tags:
      - Store API
      description: get stores
      operationId: ApiController.GetStores
      parameters:
      - in: query
        name: owner
        description: The owner of the store
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Store'
  /get-system-info:
    get:
      tags:
      - System API
      description: get system info like CPU and memory usage
      operationId: ApiController.GetSystemInfo
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/util.SystemInfo'
  /get-task:
    get:
      tags:
      - Task API
      description: get task
      operationId: ApiController.GetTask
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of task
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Task'
  /get-tasks:
    get:
      tags:
      - Task API
      description: get tasks
      operationId: ApiController.GetTasks
      parameters:
      - in: query
        name: owner
        description: The owner of task
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Task'
  /get-template:
    get:
      tags:
      - Template API
      description: get template
      operationId: ApiController.GetTemplate
      parameters:
      - in: query
        name: id
        description: The id of template
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Template'
  /get-templates:
    get:
      tags:
      - Template API
      description: get templates
      operationId: ApiController.GetTemplates
      parameters:
      - in: query
        name: owner
        description: The owner of templates
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Template'
  /get-usages:
    get:
      tags:
      - Usage API
      description: get userTableInfos
      operationId: ApiController.GetUserTableInfos
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Usage'
  /get-users:
    get:
      tags:
      - Usage API
      description: get users
      operationId: ApiController.GetUsers
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              type: string
  /get-vectors:
    get:
      tags:
      - Vector API
      description: get vectors
      operationId: ApiController.GetVectors
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Vector'
  /get-version-info:
    get:
      tags:
      - System API
      description: get version info like Casdoor release version and commit ID
      operationId: ApiController.GetVersionInfo
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/util.VersionInfo'
  /get-video:
    get:
      tags:
      - Video API
      description: get video
      operationId: ApiController.GetVideo
      parameters:
      - in: query
        name: id
        description: The id of video
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Video'
  /get-videos:
    get:
      tags:
      - Video API
      description: get videos
      operationId: ApiController.GetVideos
      parameters:
      - in: query
        name: owner
        description: The owner of videos
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Video'
  /get-workflow:
    get:
      tags:
      - Workflow API
      description: get workflow
      operationId: ApiController.GetWorkflow
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of workflow
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Workflow'
  /get-workflows:
    get:
      tags:
      - Workflow API
      description: get workflows
      operationId: ApiController.GetWorkflows
      parameters:
      - in: query
        name: owner
        description: The owner of workflow
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            type: array
            items:
              $ref: '#/definitions/object.Workflow'
  /health:
    get:
      tags:
      - System API
      description: check if the system is live
      operationId: ApiController.Health
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /process-speech-to-text:
    post:
      tags:
      - STT API
      description: convert speech to text
      operationId: ApiController.ProcessSpeechToText
      parameters:
      - in: formData
        name: audio
        description: The audio file to convert to text
        required: true
        type: file
      - in: formData
        name: storeId
        description: The store ID
        required: true
        type: string
      responses:
        "200":
          description: The transcribed text
          schema:
            $ref: '#/definitions/controllers.SpeechToTextResponse'
  /query-record:
    get:
      tags:
      - Record API
      description: query record
      operationId: ApiController.QueryRecord
      parameters:
      - in: query
        name: id
        description: The id ( owner/name ) of the record
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Record'
  /query-record-second:
    get:
      tags:
      - Record API
      description: query record
      operationId: ApiController.QueryRecordSecond
      parameters:
      - in: query
        name: id
        description: The id ( owner/name ) of the record
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/object.Record'
  /refresh-mcp-tools:
    post:
      tags:
      - Provider API
      description: refresh Mcp tools
      operationId: ApiController.RefreshMcpTools
      parameters:
      - in: body
        name: body
        description: The details of the provider
        required: true
        schema:
          $ref: '#/definitions/object.Provider'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /refresh-store-vectors:
    post:
      tags:
      - Store API
      description: refresh store vectors
      operationId: ApiController.RefreshStoreVectors
      parameters:
      - in: body
        name: body
        description: The details of the store
        required: true
        schema:
          $ref: '#/definitions/object.Store'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /signin:
    post:
      tags:
      - Account API
      description: sign in
      operationId: ApiController.Signin
      parameters:
      - in: query
        name: code
        description: code of account
        required: true
        type: string
      - in: query
        name: state
        description: state of account
        required: true
        type: string
      responses:
        "200":
          description: '{casdoorsdk} casdoorsdk.Claims The Response object'
  /signout:
    post:
      tags:
      - Account API
      description: sign out
      operationId: ApiController.Signout
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /start-connection:
    post:
      tags:
      - Connection API
      description: start connection
      operationId: ApiController.StartConnection
      parameters:
      - in: query
        name: id
        description: The id of connection
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/Response'
  /stop-connection:
    post:
      tags:
      - Connection API
      description: stop connection
      operationId: ApiController.StopConnection
      parameters:
      - in: query
        name: id
        description: The id of connection
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/Response'
  /undeploy-application:
    post:
      tags:
      - Application API
      description: undeploy application synchronously
      operationId: ApiController.UndeployApplication
      parameters:
      - in: body
        name: body
        description: The deployment request details
        required: true
        schema:
          $ref: '#/definitions/ApplicationDeploymentRequest'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-application:
    post:
      tags:
      - Application API
      description: update application
      operationId: ApiController.UpdateApplication
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of the application
        required: true
        type: string
      - in: body
        name: body
        description: The details of the application
        required: true
        schema:
          $ref: '#/definitions/object.Application'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-article:
    post:
      tags:
      - Article API
      description: update article
      operationId: ApiController.UpdateArticle
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of the article
        required: true
        type: string
      - in: body
        name: body
        description: The details of the article
        required: true
        schema:
          $ref: '#/definitions/object.Article'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-chat:
    post:
      tags:
      - Chat API
      description: update Chat
      operationId: ApiController.UpdateChat
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of the chat
        required: true
        type: string
      - in: body
        name: body
        description: The details of the chat
        required: true
        schema:
          $ref: '#/definitions/object.Chat'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-connection:
    post:
      tags:
      - Connection API
      description: update connection
      operationId: ApiController.UpdateConnection
      parameters:
      - in: query
        name: id
        description: The id of connection
        required: true
        type: string
      - in: body
        name: body
        description: The connection object
        required: true
        schema:
          $ref: '#/definitions/object.Connection'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/Response'
  /update-container:
    post:
      tags:
      - Container API
      description: update container
      operationId: ApiController.UpdateContainer
      parameters:
      - in: query
        name: id
        description: The id ( owner/name ) of the container
        required: true
        type: string
      - in: body
        name: body
        description: The details of the container
        required: true
        schema:
          $ref: '#/definitions/object.Container'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-file:
    post:
      tags:
      - File API
      description: update file
      operationId: ApiController.UpdateFile
      parameters:
      - in: query
        name: storeId
        description: The store id of the file
        required: true
        type: string
      - in: query
        name: key
        description: The key of the file
        required: true
        type: string
      - in: body
        name: body
        description: The details of the File
        required: true
        schema:
          $ref: '#/definitions/object.File'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-form:
    post:
      tags:
      - Form API
      description: update form
      operationId: ApiController.UpdateForm
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of the form
        required: true
        type: string
      - in: body
        name: body
        description: The details of the form
        required: true
        schema:
          $ref: '#/definitions/object.Form'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-image:
    post:
      tags:
      - Image API
      description: update image
      operationId: ApiController.UpdateImage
      parameters:
      - in: query
        name: id
        description: The id ( owner/name ) of the image
        required: true
        type: string
      - in: body
        name: body
        description: The details of the image
        required: true
        schema:
          $ref: '#/definitions/object.Image'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-machine:
    post:
      tags:
      - Machine API
      description: update machine
      operationId: ApiController.UpdateMachine
      parameters:
      - in: query
        name: id
        description: The id ( owner/name ) of the machine
        required: true
        type: string
      - in: body
        name: body
        description: The details of the machine
        required: true
        schema:
          $ref: '#/definitions/object.Machine'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-message:
    post:
      tags:
      - Message API
      description: update message
      operationId: ApiController.UpdateMessage
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of the message
        required: true
        type: string
      - in: body
        name: body
        description: The details of the message
        required: true
        schema:
          $ref: '#/definitions/object.Message'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-node:
    post:
      tags:
      - Node API
      description: update node
      operationId: ApiController.UpdateNode
      parameters:
      - in: query
        name: id
        description: The id ( owner/name ) of the node
        required: true
        type: string
      - in: body
        name: body
        description: The details of the node
        required: true
        schema:
          $ref: '#/definitions/object.Node'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-permission:
    post:
      tags:
      - Permission API
      description: update permission
      operationId: ApiController.UpdatePermission
      parameters:
      - in: body
        name: body
        description: The details of the permission
        required: true
        schema:
          $ref: '#/definitions/casdoorsdk.Permission'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-pod:
    post:
      tags:
      - Pod API
      description: update pod
      operationId: ApiController.UpdatePod
      parameters:
      - in: query
        name: id
        description: The id ( owner/name ) of the pod
        required: true
        type: string
      - in: body
        name: body
        description: The details of the pod
        required: true
        schema:
          $ref: '#/definitions/object.Pod'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-provider:
    post:
      tags:
      - Provider API
      description: update provider
      operationId: ApiController.UpdateProvider
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of the provider
        required: true
        type: string
      - in: body
        name: body
        description: The details of the provider
        required: true
        schema:
          $ref: '#/definitions/object.Provider'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-record:
    post:
      tags:
      - Record API
      description: update record
      operationId: ApiController.UpdateRecord
      parameters:
      - in: query
        name: id
        description: The id ( owner/name ) of the record
        required: true
        type: string
      - in: body
        name: body
        description: The details of the record
        required: true
        schema:
          $ref: '#/definitions/object.Record'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-store:
    post:
      tags:
      - Store API
      description: update store
      operationId: ApiController.UpdateStore
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of the store
        required: true
        type: string
      - in: body
        name: body
        description: The details of the store
        required: true
        schema:
          $ref: '#/definitions/object.Store'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-task:
    post:
      tags:
      - Task API
      description: update task
      operationId: ApiController.UpdateTask
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of the task
        required: true
        type: string
      - in: body
        name: body
        description: The details of the task
        required: true
        schema:
          $ref: '#/definitions/object.Task'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-template:
    post:
      tags:
      - Template API
      description: update template
      operationId: ApiController.UpdateTemplate
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of the template
        required: true
        type: string
      - in: body
        name: body
        description: The details of the template
        required: true
        schema:
          $ref: '#/definitions/object.Template'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-vector:
    post:
      tags:
      - Vector API
      description: update vector
      operationId: ApiController.UpdateVector
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of the vector
        required: true
        type: string
      - in: body
        name: body
        description: The details of the vector
        required: true
        schema:
          $ref: '#/definitions/object.Vector'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-video:
    post:
      tags:
      - Video API
      description: update video
      operationId: ApiController.UpdateVideo
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of the video
        required: true
        type: string
      - in: body
        name: body
        description: The details of the video
        required: true
        schema:
          $ref: '#/definitions/object.Video'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /update-workflow:
    post:
      tags:
      - Workflow API
      description: update workflow
      operationId: ApiController.UpdateWorkflow
      parameters:
      - in: query
        name: id
        description: The id (owner/name) of the workflow
        required: true
        type: string
      - in: body
        name: body
        description: The details of the workflow
        required: true
        schema:
          $ref: '#/definitions/object.Workflow'
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /upload-file:
    post:
      tags:
      - File API
      description: upload file to casdoor storage
      operationId: ApiController.UploadFile
      parameters:
      - in: formData
        name: file
        description: The base64 encoded file data
        required: true
        type: string
      - in: formData
        name: type
        description: The file type/extension
        required: true
        type: string
      - in: formData
        name: name
        description: The file name
        required: true
        type: string
      responses:
        "200":
          description: The Response object
          schema:
            $ref: '#/definitions/controllers.Response'
  /upload-video:
    post:
      tags:
      - Video API
      description: upload video
      operationId: ApiController.UploadVideo
      parameters:
      - in: formData
        name: file
        description: The video file to upload
        required: true
        type: file
      responses:
        "200":
          description: '"The fileId of the uploaded video"'
          schema:
            type: string
definitions:
  199312.File:
    title: File
    type: object
  202307.Properties:
    title: Properties
    type: object
  ApplicationDeploymentRequest:
    title: ApplicationDeploymentRequest
    type: object
  Response:
    title: Response
    type: object
  agent.McpTools:
    title: McpTools
    type: object
    properties:
      isEnabled:
        type: boolean
      serverName:
        type: string
      tools:
        type: string
  casdoorsdk.Permission:
    title: Permission
    type: object
  controllers.Response:
    title: Response
    type: object
    properties:
      data:
        additionalProperties:
          description: support string, struct or []struct
          type: string
      data2:
        additionalProperties:
          description: support string, struct or []struct
          type: string
      msg:
        type: string
      status:
        type: string
  controllers.SpeechToTextResponse:
    title: SpeechToTextResponse
    type: object
  object:
    title: object
    type: object
  object.Activity:
    title: Activity
    type: object
    properties:
      FieldCount:
        additionalProperties:
          type: integer
          format: int64
      date:
        type: string
  object.Application:
    title: Application
    type: object
    properties:
      createdTime:
        type: string
      description:
        type: string
      displayName:
        type: string
      name:
        type: string
      namespace:
        type: string
      owner:
        type: string
      parameters:
        type: string
      status:
        type: string
      template:
        type: string
      updatedTime:
        type: string
  object.Article:
    title: Article
    type: object
    properties:
      content:
        type: array
        items:
          $ref: '#/definitions/object.Block'
      createdTime:
        type: string
      displayName:
        type: string
      glossary:
        type: array
        items:
          type: string
      name:
        type: string
      owner:
        type: string
      provider:
        type: string
      text:
        type: string
      type:
        type: string
  object.Block:
    title: Block
    type: object
    properties:
      prompt:
        type: string
      state:
        type: string
      text:
        type: string
      textEn:
        type: string
      type:
        type: string
  object.Chat:
    title: Chat
    type: object
    properties:
      category:
        type: string
      clientIp:
        type: string
      clientIpDesc:
        type: string
      createdTime:
        type: string
      currency:
        type: string
      displayName:
        type: string
      isDeleted:
        type: boolean
      isHidden:
        type: boolean
      messageCount:
        type: integer
        format: int64
      modelProvider:
        type: string
      name:
        type: string
      needTitle:
        type: boolean
      organization:
        type: string
      owner:
        type: string
      price:
        type: number
        format: double
      store:
        type: string
      tokenCount:
        type: integer
        format: int64
      type:
        type: string
      updatedTime:
        type: string
      user:
        type: string
      user1:
        type: string
      user2:
        type: string
      userAgent:
        type: string
      userAgentDesc:
        type: string
      users:
        type: array
        items:
          type: string
  object.Connection:
    title: Connection
    type: object
    properties:
      clientIp:
        type: string
      clientIpDesc:
        type: string
      code:
        type: integer
        format: int64
      commandCount:
        type: integer
        format: int64
      connectionId:
        type: string
      createdTime:
        type: string
      creator:
        type: string
      endTime:
        type: string
      height:
        type: integer
        format: int64
      message:
        type: string
      mode:
        type: string
      name:
        type: string
      node:
        type: string
      operations:
        type: array
        items:
          type: string
      owner:
        type: string
      protocol:
        type: string
      recording:
        type: string
      reviewed:
        type: boolean
      startTime:
        type: string
      status:
        type: string
      userAgent:
        type: string
      userAgentDesc:
        type: string
      width:
        type: integer
        format: int64
  object.Container:
    title: Container
    type: object
    properties:
      command:
        type: string
      createdTime:
        type: string
      displayName:
        type: string
      image:
        type: string
      imageId:
        type: string
      name:
        type: string
      owner:
        type: string
      ports:
        type: string
      provider:
        type: string
      sizeRootFs:
        type: integer
        format: int64
      sizeRw:
        type: integer
        format: int64
      state:
        type: string
      status:
        type: string
  object.DeploymentStatus:
    title: DeploymentStatus
    type: object
  object.File:
    title: File
    type: object
    properties:
      children:
        type: array
        items:
          $ref: '#/definitions/object.File'
      createdTime:
        type: string
      isLeaf:
        type: boolean
      key:
        type: string
      size:
        type: integer
        format: int64
      title:
        type: string
      url:
        type: string
  object.Form:
    title: Form
    type: object
    properties:
      createdTime:
        type: string
      displayName:
        type: string
      formItems:
        type: array
        items:
          $ref: '#/definitions/object.FormItem'
      name:
        type: string
      owner:
        type: string
      position:
        type: string
      type:
        type: string
      url:
        type: string
  object.FormItem:
    title: FormItem
    type: object
    properties:
      label:
        type: string
      name:
        type: string
      type:
        type: string
      width:
        type: string
  object.GaugeVecInfo:
    title: GaugeVecInfo
    type: object
    properties:
      method:
        type: string
      name:
        type: string
      throughput:
        type: number
        format: double
  object.HistogramVecInfo:
    title: HistogramVecInfo
    type: object
    properties:
      count:
        type: integer
        format: int64
      latency:
        type: string
      method:
        type: string
      name:
        type: string
  object.Image:
    title: Image
    type: object
    properties:
      ImageFamily:
        type: string
      ImageName:
        type: string
      ImageOwnerAlias:
        type: string
      ImageOwnerId:
        type: integer
        format: int64
      ImageVersion:
        type: string
      IsCopied:
        type: boolean
      IsPublic:
        type: boolean
      IsSelfShared:
        type: string
      IsSubscribed:
        type: boolean
      IsSupportCloudinit:
        type: boolean
      IsSupportIoOptimized:
        type: boolean
      LoginAsNonRootSupported:
        type: boolean
      OSNameEn:
        type: string
      OSType:
        type: string
      ProductCode:
        type: string
      ResourceGroupId:
        type: string
      SupplierName:
        type: string
      Usage:
        type: string
      bootMode:
        type: string
      category:
        type: string
      createdTime:
        type: string
      description:
        type: string
      displayName:
        type: string
      imageId:
        type: string
      name:
        type: string
      os:
        type: string
      owner:
        type: string
      platform:
        type: string
      progress:
        type: string
      provider:
        type: string
      remotePassword:
        type: string
      remotePort:
        type: integer
        format: int64
      remoteProtocol:
        type: string
      remoteUsername:
        type: string
      size:
        type: string
      state:
        type: string
      systemArchitecture:
        type: string
  object.K8sStatus:
    title: K8sStatus
    type: object
  object.Label:
    title: Label
    type: object
    properties:
      endTime:
        type: number
        format: double
      id:
        type: string
      speaker:
        type: string
      startTime:
        type: number
        format: double
      tag1:
        type: string
      tag2:
        type: string
      tag3:
        type: string
      text:
        type: string
      type:
        type: string
      user:
        type: string
  object.Machine:
    title: Machine
    type: object
    properties:
      category:
        type: string
      cpuSize:
        type: string
      createdTime:
        type: string
      displayName:
        type: string
      expireTime:
        type: string
      id:
        type: string
      image:
        type: string
      memSize:
        type: string
      name:
        type: string
      os:
        type: string
      owner:
        type: string
      privateIp:
        type: string
      provider:
        type: string
      publicIp:
        type: string
      region:
        type: string
      remotePassword:
        type: string
      remotePort:
        type: integer
        format: int64
      remoteProtocol:
        type: string
      remoteUsername:
        type: string
      size:
        type: string
      state:
        type: string
      tag:
        type: string
      type:
        type: string
      updatedTime:
        type: string
      zone:
        type: string
  object.Message:
    title: Message
    type: object
    properties:
      author:
        type: string
      chat:
        type: string
      comment:
        type: string
      createdTime:
        type: string
      currency:
        type: string
      dislikeUsers:
        type: array
        items:
          type: string
      embeddingProvider:
        type: string
      errorText:
        type: string
      fileName:
        type: string
      isAlerted:
        type: boolean
      isDeleted:
        type: boolean
      isHidden:
        type: boolean
      isRegenerated:
        type: boolean
      likeUsers:
        type: array
        items:
          type: string
      modelProvider:
        type: string
      name:
        type: string
      needNotify:
        type: boolean
      organization:
        type: string
      owner:
        type: string
      price:
        type: number
        format: double
      reasonText:
        type: string
      replyTo:
        type: string
      store:
        type: string
      suggestions:
        type: array
        items:
          $ref: '#/definitions/object.Suggestion'
      text:
        type: string
      textTokenCount:
        type: integer
        format: int64
      tokenCount:
        type: integer
        format: int64
      user:
        type: string
      vectorScores:
        type: array
        items:
          $ref: '#/definitions/object.VectorScore'
  object.Node:
    title: Node
    type: object
    properties:
      autoQuery:
        type: boolean
      category:
        type: string
      cpuSize:
        type: string
      createdTime:
        type: string
      description:
        type: string
      displayName:
        type: string
      enableRemoteApp:
        type: boolean
      isPermanent:
        type: boolean
      language:
        type: string
      machineName:
        type: string
      memSize:
        type: string
      name:
        type: string
      os:
        type: string
      owner:
        type: string
      patches:
        type: array
        items:
          $ref: '#/definitions/object.Patch'
      privateIp:
        type: string
      publicIp:
        type: string
      remoteApps:
        type: array
        items:
          $ref: '#/definitions/object.RemoteApp'
      remotePassword:
        type: string
      remotePort:
        type: integer
        format: int64
      remoteProtocol:
        type: string
      remoteUsername:
        type: string
      services:
        type: array
        items:
          $ref: '#/definitions/object.Service'
      size:
        type: string
      tag:
        type: string
      type:
        type: string
      updatedTime:
        type: string
  object.Patch:
    title: Patch
    type: object
    properties:
      category:
        type: string
      expectedStatus:
        type: string
      installTime:
        type: string
      message:
        type: string
      name:
        type: string
      size:
        type: string
      status:
        type: string
      title:
        type: string
      url:
        type: string
  object.Pod:
    title: Pod
    type: object
    properties:
      createdTime:
        type: string
      hostIP:
        type: string
      labels:
        type: string
      name:
        type: string
      namespace:
        type: string
      owner:
        type: string
      podIP:
        type: string
      provider:
        type: string
      status:
        type: string
  object.PrometheusInfo:
    title: PrometheusInfo
    type: object
    properties:
      apiLatency:
        type: array
        items:
          $ref: '#/definitions/object.HistogramVecInfo'
      apiThroughput:
        type: array
        items:
          $ref: '#/definitions/object.GaugeVecInfo'
      totalThroughput:
        type: number
        format: double
  object.Prompt:
    title: Prompt
    type: object
    properties:
      image:
        type: string
      text:
        type: string
      title:
        type: string
  object.Provider:
    title: Provider
    type: object
    properties:
      apiVersion:
        type: string
      browserUrl:
        type: string
      category:
        type: string
      chain:
        type: string
      clientId:
        type: string
      clientSecret:
        type: string
      compatibleProvider:
        type: string
      configText:
        type: string
      contractMethod:
        type: string
      contractName:
        type: string
      createdTime:
        type: string
      currency:
        type: string
      displayName:
        type: string
      enableThinking:
        type: boolean
      flavor:
        type: string
      frequencyPenalty:
        type: number
        format: float
      inputPricePerThousandTokens:
        type: number
        format: double
      isDefault:
        type: boolean
      mcpTools:
        type: array
        items:
          $ref: '#/definitions/agent.McpTools'
      name:
        type: string
      network:
        type: string
      outputPricePerThousandTokens:
        type: number
        format: double
      owner:
        type: string
      presencePenalty:
        type: number
        format: float
      providerKey:
        type: string
      providerUrl:
        type: string
      region:
        type: string
      signCert:
        type: string
      signKey:
        type: string
      state:
        type: string
      subType:
        type: string
      temperature:
        type: number
        format: float
      testContent:
        type: string
      text:
        type: string
      topK:
        type: integer
        format: int64
      topP:
        type: number
        format: float
      type:
        type: string
      userCert:
        type: string
      userKey:
        type: string
  object.Record:
    title: Record
    type: object
    properties:
      action:
        type: string
      block:
        type: string
      block2:
        type: string
      blockHash:
        type: string
      blockHash2:
        type: string
      city:
        type: string
      clientIp:
        type: string
      createdTime:
        type: string
      id:
        type: integer
        format: int64
      isTriggered:
        type: boolean
      language:
        type: string
      method:
        type: string
      name:
        type: string
      needCommit:
        type: boolean
      object:
        type: string
      organization:
        type: string
      owner:
        type: string
      provider:
        type: string
      provider2:
        type: string
      region:
        type: string
      requestUri:
        type: string
      response:
        type: string
      section:
        type: string
      transaction:
        type: string
      transaction2:
        type: string
      unit:
        type: string
      user:
        type: string
      userAgent:
        type: string
  object.Remark:
    title: Remark
    type: object
    properties:
      isPublic:
        type: boolean
      score:
        type: string
      text:
        type: string
      timestamp:
        type: string
      user:
        type: string
  object.RemoteApp:
    title: RemoteApp
    type: object
    properties:
      "no":
        type: integer
        format: int64
      remoteAppArgs:
        type: string
      remoteAppDir:
        type: string
      remoteAppName:
        type: string
  object.Service:
    title: Service
    type: object
    properties:
      expectedStatus:
        type: string
      message:
        type: string
      name:
        type: string
      "no":
        type: integer
        format: int64
      path:
        type: string
      port:
        type: integer
        format: int64
      processId:
        type: integer
        format: int64
      status:
        type: string
      subStatus:
        type: string
  object.Store:
    title: Store
    type: object
    properties:
      agentProvider:
        type: string
      avatar:
        type: string
      chatCount:
        type: integer
        format: int64
      childModelProviders:
        type: array
        items:
          type: string
      childStores:
        type: array
        items:
          type: string
      createdTime:
        type: string
      disableFileUpload:
        type: boolean
      displayName:
        type: string
      embeddingProvider:
        type: string
      enableTtsStreaming:
        type: boolean
      fileTree:
        $ref: '#/definitions/object.File'
      frequency:
        type: integer
        format: int64
      imageProvider:
        type: string
      isDefault:
        type: boolean
      knowledgeCount:
        type: integer
        format: int64
      limitMinutes:
        type: integer
        format: int64
      memoryLimit:
        type: integer
        format: int64
      messageCount:
        type: integer
        format: int64
      modelProvider:
        type: string
      name:
        type: string
      owner:
        type: string
      prompt:
        type: string
      prompts:
        type: array
        items:
          $ref: '#/definitions/object.Prompt'
      propertiesMap:
        $ref: '#/definitions/202307.Properties'
      searchProvider:
        type: string
      showAutoRead:
        type: boolean
      speechToTextProvider:
        type: string
      splitProvider:
        type: string
      state:
        type: string
      storageProvider:
        type: string
      storageSubpath:
        type: string
      suggestionCount:
        type: integer
        format: int64
      textToSpeechProvider:
        type: string
      themeColor:
        type: string
      title:
        type: string
      welcome:
        type: string
      welcomeText:
        type: string
      welcomeTitle:
        type: string
  object.Suggestion:
    title: Suggestion
    type: object
    properties:
      isHit:
        type: boolean
      text:
        type: string
  object.Task:
    title: Task
    type: object
    properties:
      activity:
        type: string
      application:
        type: string
      createdTime:
        type: string
      displayName:
        type: string
      example:
        type: string
      grade:
        type: string
      labels:
        type: array
        items:
          type: string
      log:
        type: string
      modelUsageMap:
        $ref: '#/definitions/object.UsageInfo'
      name:
        type: string
      owner:
        type: string
      path:
        type: string
      provider:
        type: string
      providers:
        type: array
        items:
          type: string
      result:
        type: string
      subject:
        type: string
      text:
        type: string
      topic:
        type: string
      type:
        type: string
  object.Template:
    title: Template
    type: object
    properties:
      createdTime:
        type: string
      description:
        type: string
      displayName:
        type: string
      icon:
        type: string
      manifest:
        type: string
      name:
        type: string
      owner:
        type: string
      updatedTime:
        type: string
      version:
        type: string
  object.Usage:
    title: Usage
    type: object
    properties:
      chatCount:
        type: integer
        format: int64
      currency:
        type: string
      date:
        type: string
      messageCount:
        type: integer
        format: int64
      price:
        type: number
        format: double
      tokenCount:
        type: integer
        format: int64
      userCount:
        type: integer
        format: int64
  object.UsageInfo:
    title: UsageInfo
    type: object
    properties:
      provider:
        type: string
      startTime:
        type: string
        format: datetime
      tokenCount:
        type: integer
        format: int64
  object.Vector:
    title: Vector
    type: object
    properties:
      createdTime:
        type: string
      currency:
        type: string
      data:
        type: array
        items:
          type: number
          format: float
      dimension:
        type: integer
        format: int64
      displayName:
        type: string
      file:
        type: string
      index:
        type: integer
        format: int64
      name:
        type: string
      owner:
        type: string
      price:
        type: number
        format: double
      provider:
        type: string
      score:
        type: number
        format: float
      store:
        type: string
      text:
        type: string
      tokenCount:
        type: integer
        format: int64
  object.VectorScore:
    title: VectorScore
    type: object
    properties:
      score:
        type: number
        format: float
      vector:
        type: string
  object.Video:
    title: Video
    type: object
    properties:
      audioUrl:
        type: string
      class:
        type: string
      coverUrl:
        type: string
      createdTime:
        type: string
      dataUrl:
        type: string
      dataUrls:
        type: array
        items:
          type: string
      description:
        type: string
      displayName:
        type: string
      downloadUrl:
        type: string
      editMode:
        type: string
      excellentCount:
        type: integer
        format: int64
      grade:
        type: string
      grade2:
        type: string
      isPublic:
        type: boolean
      keywords:
        type: array
        items:
          type: string
      labelCount:
        type: integer
        format: int64
      labels:
        type: array
        items:
          $ref: '#/definitions/object.Label'
      lesson:
        type: string
      name:
        type: string
      owner:
        type: string
      playAuth:
        type: string
      remarks:
        type: array
        items:
          $ref: '#/definitions/object.Remark'
      remarks2:
        type: array
        items:
          $ref: '#/definitions/object.Remark'
      reviewState:
        type: string
      school:
        type: string
      segmentCount:
        type: integer
        format: int64
      segments:
        type: array
        items:
          $ref: '#/definitions/object.Label'
      stage:
        type: string
      state:
        type: string
      subject:
        type: string
      tag:
        type: string
      tagOnPause:
        type: boolean
      task1:
        type: string
      task2:
        type: string
      task3:
        type: string
      template:
        type: string
      topic:
        type: string
      type:
        type: string
      unit:
        type: string
      videoId:
        type: string
      videoLength:
        type: string
      wordCountMap:
        additionalProperties:
          type: integer
          format: int64
  object.Workflow:
    title: Workflow
    type: object
    properties:
      createdTime:
        type: string
      displayName:
        type: string
      message:
        type: string
      name:
        type: string
      owner:
        type: string
      questionTemplate:
        type: string
      text:
        type: string
      text2:
        type: string
  openai.ChatCompletionRequest:
    title: ChatCompletionRequest
    type: object
  openai.ChatCompletionResponse:
    title: ChatCompletionResponse
    type: object
  "true":
    title: "true"
    type: object
  util.SystemInfo:
    title: SystemInfo
    type: object
    properties:
      cpuUsage:
        type: array
        items:
          type: number
          format: double
      memoryTotal:
        type: integer
        format: int64
      memoryUsed:
        type: integer
        format: int64
  util.VersionInfo:
    title: VersionInfo
    type: object
    properties:
      commitId:
        type: string
      commitOffset:
        type: integer
        format: int64
      version:
        type: string
securityDefinitions:
  AccessToken:
    type: apiKey
    name: Authorization
    in: header
